{
  "name": "КиберМишка (a12)",
  "id": "blg-mb-1-a12",
  "nameTag": "CyBear",
  "description": "Платформа для программирования Кибермишки blg-mb-1-a12.",
  "icon": "",
  "staticComponents": false,
  "version": "1.0",
  "standardVersion": "1.0",
  "formatVersion": "1.0",
  "language": "cpp",
  "author": "Vladislav Sizykh",
  "visual": true,
  "compile": true,
  "mainFileExtension": "cpp",
  "headerFileExtension": "hpp",
  "staticActionDelimeter": "::",
  "componentDeclaration": true,
  "defaultSetupFunctions": [],
  "compilingSettings": [
    {
      "command": "arm-none-eabi-g++",
      "flags": [
        "-mcpu=cortex-m4",
        "-DSTM32G431xx",
        "-D_FIR_GIT_REV=\"GIT_NIY\"",
        "-T",
        "./cyberbear_G431xB_UC.ld",
        "./startup_stm32g431xx.s",
        "-o",
        "./build/sketch.elf",
        "-g",
        "./sketch.cpp",
        "-mthumb",
        "--specs=nosys.specs",
        "-Os",
        "qhsm.cpp",
        "-fno-exceptions",
        "-ffunction-sections",
        "-fdata-sections",
        "-Xlinker",
        "--gc-sections",
        "-Wall"
      ]
    },
    {
      "command": "arm-none-eabi-objcopy",
      "flags": ["-Obinary", "./build/sketch.elf", "./build/sketch.bin"]
    }
  ],
  "mainFunction": true,
  "delimeter": ";",
  "defaultIncludeFiles": ["stm32g431xx.h", "Pins.hpp", "blg-mb-1-a7_hal.hpp"],
  "defaultBuildFiles": [
    "commonEars.hpp",
    "ADC.hpp",
    "blg-mb-1-a7_hal.hpp",
    "Connector.hpp",
    "system.hpp",
    "CommonPWM.hpp",
    "PWMPins.hpp",
    "cyberbear_G431xB_UC.ld",
    "startup_stm32g431xx.s",
    "stm32g431xx.h",
    "core_cm4.h",
    "core_cmSimd.h",
    "core_cmInstr.h",
    "cmsis_gcc.h",
    "core_cmFunc.h",
    "system_stm32g4xx.h",
    "Pins.hpp",
    "RGBController.hpp",
    "Color.hpp",
    "SoundController.hpp",
    "CommonSound.hpp",
    "RgbLed.hpp",
    "Pattern.hpp"
  ],
  "components": {
    "Accel": {
      "name": "Акселерометр",
      "description": "Компонент для определения положения Мишки.",
      "img": "blg-mb/accelOrientation.svg",
      "signals": {
        "isOrientationChanged": {
          "alias": "Положение изменилось",
          "img": "blg-mb/accelOrientation.svg",
          "description": "Это событие вызывается, когда положение Мишки меняется.",
          "checkMethod": "isOrientationChanged"
        }
      },
      "constructorParameters": {},
      "variables": {
        "orientation": {
          "alias": "Ориентация",
          "img": "blg-mb/askAccel.svg",
          "type": "uint8_t",
          "description": "Текущее положение Мишки."
        },
        "ACCEL_DIR_DN": {
          "alias": "На ушах",
          "img": "blg-mb/bearIsUpsideDown.svg",
          "type": "uint8_t",
          "description": "Мишка перевёрнут, ушами вниз, нижними лапами вверх."
        },
        "ACCEL_DIR_UP": {
          "alias": "На ногах",
          "img": "blg-mb/bearIsStanding.svg",
          "type": "uint8_t",
          "description": "Мишка расположен как обычно, ушами вверх, нижними лапами вниз."
        },
        "ACCEL_DIR_LEFT": {
          "alias": "На левом боку",
          "img": "blg-mb/bearIsOnLeftSide.svg",
          "type": "uint8_t",
          "description": "Мишка на левом боку."
        },
        "ACCEL_DIR_RIGHT": {
          "alias": "На правом боку",
          "img": "blg-mb/bearIsOnRightSide.svg",
          "type": "uint8_t",
          "description": "Мишка на правом боку."
        },
        "ACCEL_DIR_FACE": {
          "alias": "На спине",
          "img": "blg-mb/bearIsOnBack.svg",
          "type": "uint8_t",
          "description": "Мишка на спине."
        },
        "ACCEL_DIR_BACK": {
          "alias": "На животе",
          "img": "blg-mb/bearIsOnBelly.svg",
          "type": "uint8_t",
          "description": "Мишка на животе."
        }
      },
      "importFiles": ["Accel.hpp"],
      "buildFiles": ["Accel.hpp", "accel.c"],
      "loopActions": [],
      "methods": {},
      "singletone": false
    },
    "Button": {
      "name": "Кнопка",
      "description": "Выберите любую кнопку КиберМишки, она будет создавать событие.",
      "img": "arduino/button.svg",
      "signals": {
        "isPressed": {
          "alias": "Зажата",
          "img": "arduino/isPressed.svg",
          "description": "Это событие вызывается до тех пор, пока кнопка зажата.",
          "checkMethod": "isPressed"
        },
        "clicked": {
          "alias": "Клик",
          "img": "arduino/clicked.svg",
          "description": "Кнопку быстро нажали и отпустили.",
          "checkMethod": "isClicked"
        },
        "isReleased": {
          "alias": "Отжата",
          "img": "common/isReleased.svg",
          "description": "Кнопка отпущена.",
          "checkMethod": "isReleased"
        }
      },
      "constructorParameters": {
        "pin": {
          "name": "Какая",
          "type": ["1", "2", "3", "4", "5", "6"],
          "valueAlias": [
            "Правая лапа",
            "Левая лапа",
            "Правый палец",
            "Левый палец",
            "Правый бок",
            "Левый бок"
          ],
          "description": "Расположение кнопки"
        }
      },
      "variables": {
        "value": {
          "alias": "Значение",
          "img": "common/value.svg",
          "type": "int",
          "description": "Текущее значение на пине"
        }
      },
      "buildFiles": ["Button.hpp"],
      "importFiles": ["Button.hpp"],
      "loopActions": ["scan"],
      "methods": {},
      "singletone": false
    },

    "UserSignal": {
      "name": "Свое событие",
      "description": "Создавайте собственные события для упрощения диаграммы состояний.",
      "img": "common/userSignal.svg",
      "signals": {
        "isCalled": {
          "alias": "Вызвано",
          "img": "common/signalIsCalled.svg",
          "description": "Вызвано искусственное событие.",
          "checkMethod": "isCalled"
        }
      },
      "constructorParameters": {},
      "methods": {
        "call": {
          "alias": "Вызвать",
          "img": "common/signalCall.svg",
          "description": "Вызвать искусственное событие."
        }
      },
      "buildFiles": ["UserSignal.hpp"],
      "importFiles": ["UserSignal.hpp"],
      "singletone": false,
      "variables": {}
    },

    "Speaker": {
      "name": "Пищалка",
      "description": "Создавайте свои звуки для динамика, играя с нотами, амплитудой и частотой.",
      "img": "blg-mb/beeperNote.svg",
      "signals": {
        "isNoteEnd": {
          "img": "blg-mb/isSoundEnd.svg",
          "description": "Проигрывание звука только что завершилось.",
          "checkMethod": "isNoteEnd",
          "alias": "Звук сыгран"
        }
      },
      "constructorParameters": {},
      "variables": {},
      "buildFiles": ["SpeakerSound.hpp", "Sounds.hpp", "Speaker.hpp"],
      "importFiles": ["Speaker.hpp"],
      "methods": {
        "setupNote": {
          "img": "blg-mb/setupEvent.svg",
          "parameters": [
            {
              "name": "Нота",
              "type": [
                "Note_c",
                "Note_cH",
                "Note_d",
                "Note_dH",
                "Note_e",
                "Note_f",
                "Note_fH",
                "Note_g",
                "Note_gH",
                "Note_a",
                "Note_b",
                "Note_h"
              ],
              "valueAlias": [
                "До",
                "До#",
                "Ре",
                "Ре#",
                "Ми",
                "Фа",
                "Фа#",
                "Соль",
                "Соль#",
                "Ля",
                "Ля#",
                "Си"
              ],
              "description": "Проигрываемая нота.",
              "optional": false
            },
            {
              "name": "Амплитуда",
              "type": "uint16_t",
              "description": "Амплитуда звука. От 0 до 2047.",
              "optional": false
            },
            {
              "name": "Время",
              "type": "uint16_t",
              "description": "Длительность звука (мс). От 0 до 65535.",
              "optional": false
            }
          ],
          "alias": "Выбрать ноту",
          "description": "Настройка ноты"
        },
        "setupFrequency": {
          "img": "blg-mb/setupFrequency.svg",
          "parameters": [
            {
              "name": "Частота",
              "type": "uint16_t",
              "description": "Частота звука (Гц). От 0 до 24000.",
              "optional": false
            },
            {
              "name": "Амплитуда",
              "type": "uint16_t",
              "description": "Амплитуда звука. От 0 до 2047.",
              "optional": false
            },
            {
              "name": "Время",
              "type": "uint16_t",
              "description": "Длительность звука (мс). От 0 до 65535.",
              "optional": false
            }
          ],
          "alias": "Настроить частоту",
          "description": "Тонкая настройка звука."
        },
        "play": {
          "img": "arduino/start.svg",
          "parameters": [],
          "alias": "Запустить звук",
          "description": "Запустить настроенный звук"
        },
        "stop": {
          "img": "blg-mb/stop.svg",
          "parameters": [],
          "alias": "Остановить звук",
          "description": "Остановить воспроизведение звука"
        }
      },
      "singletone": false
    },

    "SpeakerSound": {
      "name": "Пищалка-звуки",
      "description": "Коллекция готовых звуков. КиберМишка может пищать, рычать, бурчать и сигналить.",
      "img": "blg-mb/beeperSound.svg",
      "signals": {
        "isSoundEnd": {
          "img": "blg-mb/isSoundEnd.svg",
          "description": "Проигрывание звука только что завершилось.",
          "checkMethod": "isSoundEnd",
          "alias": "Звук сыгран"
        }
      },
      "constructorParameters": {},
      "variables": {},
      "buildFiles": ["Sounds.hpp", "SpeakerSound.hpp", "CommonSound.hpp"],
      "importFiles": ["SpeakerSound.hpp"],
      "methods": {
        "setupSound": {
          "img": "blg-mb/setupEvent.svg",
          "parameters": [
            {
              "name": "Звук",
              "type": [
                "&SineSound",
                "&SqueakSound",
                "&BeepBeepSound",
                "&LaserSound",
                "&WaterDropSound",
                "&RubleSound",
                "&SirenSound"
              ],
              "valueAlias": [
                "Рычание",
                "Писк",
                "Бип-Бип",
                "Лазер",
                "Капля воды",
                "Бурчание",
                "Сирена"
              ],
              "description": "Проигрываемый звук.",
              "optional": false
            },
            {
              "name": "Время",
              "type": "uint16_t",
              "description": "Длительность звука (мс). От 0 до 65535.",
              "optional": false
            }
          ],
          "description": "Выбрать один из звуков и задать его продолжительность.",
          "alias": "Выбрать звук"
        },
        "play": {
          "img": "arduino/start.svg",
          "description": "Запускает воспроизведение выбраного звука.",
          "alias": "Запустить звук"
        },
        "stop": {
          "img": "blg-mb/stop.svg",
          "parameters": [],
          "alias": "Остановить звук",
          "description": "Остановить воспроизведение звука"
        }
      },
      "singletone": false
    },

    "PhotoDiode": {
      "name": "Нос",
      "description": "Чувствует только невидимый инфракрасный свет, его много в солнечном свете.",
      "img": "blg-mb/nose.svg",
      "signals": {
        "isThresholdValue": {
          "img": "blg-mb/threshold.svg",
          "description": "Был достигнут порог яркости",
          "checkMethod": "isThresholdValue",
          "parameters": [],
          "alias": "Пороговое значение"
        }
      },
      "constructorParameters": {},
      "methods": {
        "setupEvent": {
          "img": "blg-mb/setupEvent.svg",
          "parameters": [
            {
              "name": "Порог",
              "type": "uint16_t",
              "description": "Пороговый уровень яркости, при котором будет вызвано событие. От 0 до 4095.",
              "optional": false
            }
          ],
          "alias": "Настроить яркость",
          "description": "Настроить уровень яркости, при котором будет вызвано событие «Порог»."
        },
        "off": {
          "img": "arduino/switch-off.svg",
          "alias": "Выключить",
          "description": "Отключить ИК-фотодиод, чтобы он перестал вызывать сигналы."
        },
        "on": {
          "img": "arduino/switch-on.svg",
          "alias": "Включить",
          "description": "Включить ИК-фотодиод, чтобы он начал вызывать сигналы."
        }
      },
      "variables": {
        "value": {
          "img": "common/value.svg",
          "type": "uint16_t",
          "description": "Воспринимаемая яркость, в виде числа от 0 до 4095.",
          "alias": "Яркость"
        },
        "threshold": {
          "img": "blg-mb/thresholdValue.svg",
          "type": "uint16_t",
          "description": "Пороговое значение для события. От 0 до 4095.",
          "alias": "Порог"
        }
      },
      "buildFiles": ["PhotoDiode.hpp"],
      "importFiles": ["PhotoDiode.hpp"],
      "loopActions": ["scan"]
    },

    "Eyes": {
      "name": "Глаза",
      "description": "Подберите КиберМишке понравившийся цвет глаз, управляя светодиодами.",
      "img": "blg-mb/eyesPalette.svg",
      "signals": {},
      "constructorParameters": {
        "pin": {
          "name": "Какой",
          "type": ["1", "2"],
          "valueAlias": ["Правый", "Левый"],
          "description": "Расположение глаза"
        }
      },
      "variables": {},
      "methods": {
        "setColorPalette": {
          "img": "blg-mb/setColorPalette.svg",
          "parameters": [
            {
              "name": "Цвет",
              "type": [
                "&ColorRed",
                "&ColorReddish",
                "&ColorOrange",
                "&ColorGreen",
                "&ColorLime",
                "&ColorBlue",
                "&ColorCyan",
                "&ColorPink",
                "&ColorPurple",
                "&ColorYellow",
                "&ColorWhite",
                "&ColorBlack",
                "&ColorPerfectWhite"
              ],
              "valueAlias": [
                "Красный",
                "Красноватый",
                "Оранжевый",
                "Зеленый",
                "Лаймовый",
                "Голубой",
                "Циановый",
                "Розовый",
                "Фиолетовый",
                "Желтый",
                "Белый",
                "Черный",
                "Белоснежный"
              ],
              "description": "Цвет светодиода.",
              "optional": false
            }
          ],
          "description": "Установить выбранный цвет.",
          "alias": "Выбрать из палитры"
        },
        "setColor": {
          "img": "blg-mb/EyeRGBK.svg",
          "parameters": [
            {
              "name": "Красный",
              "type": "uint8_t",
              "description": "Продолжительность красного (R) свечения. От 0 до 255.",
              "optional": false
            },
            {
              "name": "Зелёный",
              "type": "uint8_t",
              "description": "Продолжительность зелёного (G) свечения. От 0 до 255.",
              "optional": false
            },
            {
              "name": "Синий",
              "type": "uint8_t",
              "description": "Продолжительность синего (B) свечения. От 0 до 255.",
              "optional": false
            },
            {
              "name": "Чёрный",
              "type": "uint8_t",
              "description": "Длительность выключения всех трёх светодиодов. Регулирует яркость. От 0 до 255.",
              "optional": false
            }
          ],
          "description": "Установить цвет в формате RGBK.",
          "alias": "Задать цвет из RGBK"
        },
        "off": {
          "img": "arduino/switch-off.svg",
          "description": "Установить черный цвет глаза.",
          "alias": "Выключить"
        }
      },
      "buildFiles": [
        "Eyes.hpp",
        "RgbLed.hpp",
        "Connector.hpp",
        "PWMHelpers.hpp",
        "PWMInit.hpp",
        "PWM.hpp"
      ],
      "importFiles": ["Eyes.hpp"],
      "singletone": false
    },

    "Microphone": {
      "name": "Уши-громкость",
      "description": "КиберМишка навострил уши. Прислушайтесь к звукам, настрой порог громкости.",
      "img": "blg-mb/earsVolume.svg",
      "signals": {
        "isLoudSound": {
          "img": "blg-mb/heardPeak.svg",
          "description": "Мишка услышал громкий звук",
          "checkMethod": "isLoudSound",
          "parameters": [],
          "alias": "Услышан громкий звук"
        }
      },
      "constructorParameters": {},
      "variables": {},
      "methods": {
        "setCooldown": {
          "img": "blg-mb/setCooldown.svg",
          "parameters": [
            {
              "name": "Установить интервал срабатывания",
              "type": "uint16_t",
              "description": "Интервал срабатывания (мс)",
              "optional": false
            }
          ],
          "description": "Настравает интервал срабатывания между звуками, на которые мишка реагирует",
          "alias": "Установить интервал срабатывания"
        },
        "setupEvent": {
          "img": "blg-mb/volumeThreshold.svg",
          "parameters": [
            {
              "name": "Громкость",
              "type": "uint16_t",
              "description": "Уровень громкости для события. От 0 до 4095.",
              "optional": false
            }
          ],
          "description": "Настравает громкость звука, на которую мишка реагирует.",
          "alias": "Настроить порог громкости"
        },
        "off": {
          "img": "arduino/switch-off.svg",
          "alias": "Выключить",
          "description": "Отключить микрофон, чтобы он перестал вызывать сигналы."
        },
        "on": {
          "img": "arduino/switch-on.svg",
          "alias": "Включить",
          "description": "Включить микрофон."
        }
      },
      "buildFiles": ["Microphone.hpp"],
      "importFiles": ["Microphone.hpp"],
      "singletone": false
    },
    "IR": {
      "name": "ИК-светодиод",
      "description": "ИК-светодиод позволяет КиберМишке посылать инфракрасные сигналы, которые не видны человеческим глазом.",
      "img": "blg-mb/ir.svg",
      "signals": {},
      "constructorParameters": {},
      "variables": {},
      "methods": {
        "on": {
          "alias": "Включить",
          "img": "arduino/switch-on.svg",
          "description": "Включить ИК-светодиод, чтобы он начал посылать сигналы."
        },
        "off": {
          "alias": "Выключить",
          "img": "arduino/switch-off.svg",
          "description": "Выключить ИК-светодиод."
        }
      },
      "importFiles": ["ir.hpp"],
      "buildFiles": ["ir.hpp", "ir.c"],
      "loopActions": [],
      "singletone": false
   },

    "Matrix": {
      "name": "Матрица светодиодов",
      "description": "Расширенные настройки для матрицы. Рисуйте и задавайте яркость каждому светодиоду.",
      "img": "blg-mb/matrix.svg",
      "signals": {},
      "methods": {
        "setPixel": {
          "alias": "Яркость светодиода",
          "img": "blg-mb/setPixel.svg",
          "description": "Настроить яркость светодиода.",
          "parameters": [
            {
              "name": "Строка",
              "type": "uint8_t",
              "description": "Номер строки, на которой расположен светодиод."
            },
            {
              "name": "Столбец",
              "type": "uint8_t",
              "description": "Номер столбца, на котором расположен светодиод."
            },
            {
              "name": "Яркость",
              "type": "uint8_t",
              "description": "Яркость светодиода. От 0 до 100."
            }
          ]
        },
        "setPattern": {
          "alias": "Рисовать",
          "img": "blg-mb/draw.svg",
          "description": "Изобразить рисунок на матрице.",
          "parameters": [
            {
              "name": "Рисунок",
              "type": "HalfMatrix5x7",
              "description": "Рисунок, который будет изображен на матрице."
            }
          ]
        },
        "changePatternBright": {
          "alias": "Яркость матрицы",
          "img": "blg-mb/changePatternBright.svg",
          "description": "Изменить яркость группы светодиодов на матрице.",
          "parameters": [
            {
              "name": "Режим",
              "type": ["OFF_LEDS", "ON_LEDS", "ALL_LEDS"],
              "valueAlias": ["Выключенные", "Включенные", "Все"],
              "description": "Яркость каких светодиодов будет изменена"
            },
            {
              "name": "Яркость",
              "type": "uint8_t",
              "description": "Уровень яркости, который будет установлен на светодиоды. От 0 до 100"
            }
          ]
        },
        "clear": {
          "alias": "Очистить",
          "img": "blg-mb/clear.svg",
          "description": "Выключить все светодиоды.",
          "parameters": []
        }
      },
      "variables": {},
      "constructorParameters": {},
      "buildFiles": [
        "Matrix.hpp",
        "LED.hpp",
        "PWM.hpp",
        "PWMHelpers.hpp",
        "PWMInit.hpp",
        "Pattern.hpp"
      ],
      "importFiles": ["Matrix.hpp"],
      "singletone": false
    },
    "MatrixMask": {
      "name": "Матрица-маска",
      "description": "Применяйте разные маски для матрицы светодиодов с использованием операций.",
      "img": "blg-mb/matrixMask.svg",
      "signals": {},
      "methods": {
        "maskPixel": {
          "alias": "Маска для светодиода",
          "img": "blg-mb/maskPixel.svg",
          "description": "Включить или выключить светодиод, используя битовую маску.",
          "parameters": [
            {
              "name": "Строка",
              "type": "uint8_t",
              "description": "Номер строки, на которой расположен светодиод."
            },
            {
              "name": "Столбец",
              "type": "uint8_t",
              "description": "Номер столбца, на котором расположен светодиод."
            },
            {
              "name": "Значение",
              "type": ["0", "1"],
              "description": "Второй параметр применяемой функции. Первый – текущее значение светодиода. Значение 0 соответствует выключенному светодиоду, а 1 – включенному."
            },
            {
              "name": "Операция",
              "type": ["AND", "OR", "XOR"],
              "description": "Битовая функция, используемая для установки значения."
            }
          ]
        },
        "maskPattern": {
          "alias": "Маска для матрицы",
          "img": "blg-mb/maskGrid.svg",
          "description": "Изобразить рисунок на матрице, используя битовую маску.",
          "parameters": [
            {
              "name": "Рисунок",
              "type": "Matrix5x7",
              "description": "Рисунок, который будет изображен на матрице."
            },
            {
              "name": "Операция",
              "type": ["AND", "OR", "XOR"],
              "description": "Битовая маска для установки значения пикселя."
            }
          ]
        }
      },
      "variables": {},
      "constructorParameters": {},
      "buildFiles": [
        "MatrixMask.hpp",
        "LED.hpp",
        "PWM.hpp",
        "PWMHelpers.hpp",
        "PWMInit.hpp",
        "Pattern.hpp"
      ],
      "importFiles": ["MatrixMask.hpp"],
      "singletone": false
    },

    "MatrixAnimation": {
      "name": "Матрица-анимация",
      "description": "Нарисуйте последовательно картинки и они будут сменяться анимированными переходами.",
      "img": "blg-mb/matrixAnimation.svg",
      "signals": {
        "AnimationFinished": {
          "img": "blg-mb/isSoundEnd.svg",
          "description": "Переход к финальной картинке завершён",
          "checkMethod": "AnimationFinished",
          "parameters": [],
          "alias": "Анимация завершена"
        }
      },
      "constructorParameters": {},
      "variables": {},
      "methods": {
        "setFrame": {
          "img": "blg-mb/draw.svg",
          "parameters": [
            {
              "name": "Рисунок",
              "type": "HalfMatrix5x7",
              "description": "Рисунок, который будет изображен на матрице."
            },
            {
              "name": "Время",
              "type": "uint32_t",
              "description": "Продолжительность анимации (мс)."
            }
          ],
          "description": "Установить рисунок, к которой нужно перейти.",
          "alias": "Установить рисунок"
        }
      },
      "buildFiles": [
        "MatrixAnimation.hpp",
        "Matrix.hpp",
        "LED.hpp",
        "PWM.hpp",
        "PWMHelpers.hpp",
        "PWMInit.hpp",
        "Pattern.hpp"
      ],
      "importFiles": ["MatrixAnimation.hpp"],
      "singletone": false
    },

    "MatrixPicture": {
      "name": "Матрица-картинка",
      "description": "Коллекция готовых картинок. Выберите и КиберМишка сам нарисует ее на своем животе.",
      "img": "blg-mb/matrixPicture.svg",
      "signals": {},
      "constructorParameters": {},
      "variables": {},
      "methods": {
        "draw": {
          "img": "blg-mb/drawPicture.svg",
          "parameters": [
            {
              "name": "Рисунок",
              "type": ["heart", "smile", "sadness", "cross", "note", "rhombus", "square"],
              "valueAlias": ["Сердце", "Улыбка", "Грусть", "Крест", "Нота", "Ромб", "Квадрат"],
              "description": "Рисунок, который будет изображен на матрице."
            }
          ],
          "description": "Изобразить картинку на матрице.",
          "alias": "Установить картинку"
        }
      },
      "buildFiles": [
        "MatrixPicture.hpp",
        "Matrix.hpp",
        "LED.hpp",
        "PWM.hpp",
        "PWMHelpers.hpp",
        "PWMInit.hpp",
        "Pattern.hpp",
        "Pictures.hpp",
        "Picture.hpp"
      ],
      "importFiles": ["MatrixPicture.hpp"],
      "singletone": false
    },

    "Random": {
      "name": "Генератор случайностей",
      "description": "КиберМишка подскажет, что выпало на игральном кубике, сгенерировав случайное число.",
      "img": "common/random.svg",
      "constructorParameters": {},
      "signals": {},
      "methods": {
        "setSeed": {
          "alias": "Установить затравку",
          "img": "common/randomSeed.svg",
          "parameters": [
            {
              "name": "Затравка",
              "description": "Число, лежащее в основе генератора чисел и определяющее все последующие генерации.",
              "type": "unsigned long"
            }
          ],
          "description": "Продвинутая функция для отладки. Вручную устанавливает затравку для генератора случайностей, чтобы он выдавал одинаковые последовательности значений при каждом запуске программы. Для нормальной работы этого не требуется, и затравка будет взята из встроенного генератора истинных случайных чисел."
        },
        "doRandom": {
          "alias": "Сгенерировать",
          "img": "common/randomRoll.svg",
          "description": "Сгенерировать случайное число"
        },
        "doRangeRandom": {
          "alias": "Сгенерировать в диапазоне",
          "img": "common/randomRange.svg",
          "parameters": [
            {
              "name": "Начало",
              "type": "signed long long",
              "description": "Начало диапазона [начало; конец). Начало в диапазон входит."
            },
            {
              "name": "Конец",
              "type": "signed long long",
              "description": "Конец диапазона [начало; конец). Конец в диапазон не входит."
            }
          ],
          "description": "Сгенерировать случайное число в заданном диапазоне [начало; конец). Конец в диапазон не входит."
        }
      },
      "buildFiles": ["Random.hpp"],
      "importFiles": ["Random.hpp"],
      "singletone": false,
      "variables": {
        "value": {
          "alias": "Целое число",
          "img": "common/valueSigned.svg",
          "type": "signed long",
          "description": "Сгенерированное целое число со знаком."
        },
        "uValue": {
          "alias": "Натуральное число",
          "img": "common/valueUnsigned.svg",
          "type": "unsigned long",
          "description": "Сгенерированное беззнаковое целое число."
        }
      }
    },

    "Timer": {
      "name": "Таймер",
      "description": "Запускайте разные действия с заданным интервалом, выставив время таймера.",
      "img": "arduino/timer.svg",
      "signals": {
        "timeout": {
          "alias": "Тайм-аут",
          "img": "arduino/timeout.svg",
          "description": "Прошёл очередной интервал таймера.",
          "checkMethod": "timeout"
        }
      },
      "constructorParameters": {},
      "methods": {
        "reset": {
          "alias": "Сброс",
          "img": "arduino/reset.svg",
          "description": "Сбросить таймер, отчет начнется сначала."
        },
        "disable": {
          "alias": "Приостановить",
          "img": "arduino/timer-stop.svg",
          "description": "Приостановить таймер, при включении сохраняется время до срабатывания."
        },
        "enable": {
          "alias": "Возобновить",
          "img": "arduino/timer-start.svg",
          "description": "Возобновить работу таймера."
        },
        "start": {
          "alias": "Старт",
          "img": "arduino/start.svg",
          "parameters": [
            {
              "name": "Интервал",
              "type": "unsigned long",
              "description": "Интервал срабатывания (мс)."
            }
          ],
          "description": "Запустить таймер. Будет сигнал раз в интервал."
        }
      },
      "buildFiles": ["Timer.h"],
      "importFiles": ["Timer.h"],
      "singletone": false,
      "variables": {
        "difference": {
          "alias": "Разница",
          "img": "arduino/difference.svg",
          "type": "unsigned long",
          "description": "Оставшееся время (мс) до окончания таймера."
        }
      }
    },
    "Counter": {
      "name": "Счетчик",
      "description": "Сделайте считалку для КиберМишки, прибавляя числа к счетчику.",
      "img": "arduino/counter.svg",
      "signals": {},
      "constructorParameters": {},
      "methods": {
        "add": {
          "alias": "Увеличить",
          "img": "arduino/add.svg",
          "description": "Добавить указанное значение к счетчику.",
          "parameters": [
            {
              "name": "Значение",
              "type": "int",
              "description": "Значение, которое будет добавлено к счетчику."
            }
          ]
        },
        "sub": {
          "alias": "Уменьшить",
          "img": "arduino/sub.svg",
          "description": "Вычесть указанное значение из счетчика.",
          "parameters": [
            {
              "name": "Значение",
              "type": "int",
              "description": "Значение, которое будет вычтено из счетчика."
            }
          ]
        },
        "set": {
          "alias": "Установить",
          "img": "common/set.svg",
          "description": "Установить значение счетчика.",
          "parameters": [
            {
              "name": "Значение",
              "type": "int",
              "description": "Значение, которое будет установлено в счетчике."
            }
          ]
        },
        "reset": {
          "alias": "Сброс",
          "img": "arduino/reset.svg",
          "description": "Обнулить значение счетчика."
        }
      },
      "variables": {
        "value": {
          "alias": "Значение",
          "img": "common/value.svg",
          "description": "Текущее значение счетчика.",
          "type": "int"
        }
      },
      "buildFiles": ["Counter.h"],
      "importFiles": ["Counter.h"],
      "singletone": false
    },

    "CalcInt": {
      "name": "Калькулятор",
      "description": "Совершайте арифметические и двоичные операции над целыми числами.",
      "img": "math/calcInt.svg",
      "signals": {
        "isOverflow": {
          "alias": "Переполнение значения",
          "img": "math/overflow.svg",
          "description": "Произошло переполнение хранимого значения калькулятора (в него попытались записать слишком большое значение).",
          "checkMethod": "isOverflow"
        },
        "isZeroDivision": {
          "alias": "Деление на ноль",
          "img": "math/divZero.svg",
          "description": "Произошло деление на ноль. Значению калькулятора верить нельзя, в нём может быть что-то странное.",
          "checkMethod": "isZeroDivision"
        }
      },
      "methods": {
        "set": {
          "alias": "Установить",
          "img": "common/set.svg",
          "description": "Установить значение, которое будет храниться в калькуляторе.",
          "parameters": [
            {
              "name": "Значение",
              "type": "int32_t",
              "description": "Новое значение для калькулятора."
            }
          ]
        },
        "add": {
          "alias": "Прибавить",
          "img": "math/add.svg",
          "description": "Прибавить значение к хранимому числу калькулятора.",
          "parameters": [
            {
              "name": "Слагаемое",
              "type": "int32_t",
              "description": "Слагаемое для операции."
            }
          ]
        },
        "sub": {
          "alias": "Вычесть",
          "img": "math/sub.svg",
          "description": "Вычесть значение из хранимого числа калькулятора.",
          "parameters": [
            {
              "name": "Вычитаемое",
              "type": "int32_t",
              "description": "Вычитаемое для операции."
            }
          ]
        },
        "mul": {
          "alias": "Умножить",
          "img": "math/mul.svg",
          "description": "Умножить значение хранимого числа калькулятора.",
          "parameters": [
            {
              "name": "Множитель",
              "type": "int32_t",
              "description": "Множитель для операции."
            }
          ]
        },
        "div": {
          "alias": "Разделить",
          "img": "math/div.svg",
          "description": "Целочисленное деление хранимого числа калькулятора. При делении на ноль значение не изменяется и возникает событие.",
          "parameters": [
            {
              "name": "Делитель",
              "type": "int32_t",
              "description": "Делитель для операции."
            }
          ]
        },
        "mod": {
          "alias": "Остаток от деления",
          "img": "math/mod.svg",
          "description": "Получить остаток от деления хранимого числа калькулятора на указанный делитель. При делении на ноль значение не изменяется и возникает событие.",
          "parameters": [
            {
              "name": "Делитель",
              "type": "int32_t",
              "description": "Делитель для операции."
            }
          ]
        },
        "neg": {
          "alias": "Поменять знак",
          "img": "math/neg.svg",
          "description": "Поменять знак у хранимого числа калькулятора.",
          "parameters": []
        },
        "abs": {
          "alias": "Модуль",
          "img": "math/abs.svg",
          "description": "Установить абсолютное значение для хранимого числа калькулятора.",
          "parameters": []
        },
        "bitAnd": {
          "alias": "Битовое И",
          "img": "math/bitAnd.svg",
          "description": "Побитовое И между хранимым числом калькулятора и параметром.",
          "parameters": [
            {
              "name": "Значение",
              "type": "int32_t",
              "description": "Значение для операции."
            }
          ]
        },
        "bitOr": {
          "alias": "Битовое ИЛИ",
          "img": "math/bitOr.svg",
          "description": "Побитовое ИЛИ между хранимым числом калькулятора и параметром.",
          "parameters": [
            {
              "name": "Значение",
              "type": "int32_t",
              "description": "Значение для операции."
            }
          ]
        },
        "bitXor": {
          "alias": "Битовое исключающее ИЛИ",
          "img": "math/bitXor.svg",
          "description": "Побитовая операция XOR между хранимым числом калькулятора и параметром.",
          "parameters": [
            {
              "name": "Значение",
              "type": "int32_t",
              "description": "Значение для операции."
            }
          ]
        },
        "bitNot": {
          "alias": "Битовое НЕ",
          "img": "math/bitNot.svg",
          "description": "Побитовое отрицание для хранимого числа калькулятора.",
          "parameters": []
        },
        "shiftLeft": {
          "alias": "Битовый сдвиг влево",
          "img": "math/shiftLeft.svg",
          "description": "Побитовый сдвиг влево для хранимого числа калькулятора.",
          "parameters": [
            {
              "name": "Сдвиг",
              "type": "int32_t",
              "description": "Количество бит для сдвига."
            }
          ]
        },
        "shiftRight": {
          "alias": "Битовый сдвиг вправо",
          "img": "math/shiftRight.svg",
          "description": "Побитовый сдвиг вправо для хранимого числа калькулятора.",
          "parameters": [
            {
              "name": "Сдвиг",
              "type": "int32_t",
              "description": "Количество бит для сдвига."
            }
          ]
        }
      },
      "variables": {
        "value": {
          "alias": "Результат",
          "img": "common/value.svg",
          "type": "int32_t",
          "description": "Хранимое число калькулятора."
        }
      },
      "constructorParameters": {},
      "buildFiles": ["CalcInt.hpp", "OverflowHelpers.hpp"],
      "importFiles": ["CalcInt.hpp"],
      "singletone": false
    }
  }
}

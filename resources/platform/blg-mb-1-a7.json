{
  "name": "Кибермишка",
  "id": "blg-mb-1-a7",
  "nameTag": "CyBear",
  "description": "Платформа для программирования Кибермишки blg-mb-1-a7.",
  "icon": "",
  "staticComponents": false,
  "version": "1.0",
  "standardVersion": "1.0",
  "formatVersion": "1.0",
  "language": "cpp",
  "author": "Vladislav Sizykh",
  "visual": true,
  "compile": true,
  "mainFileExtension": "cpp",
  "headerFileExtension": "hpp",
  "staticActionDelimeter": "::",
  "defaultSetupFunctions": [],
  "compilingSettings": [
    {
      "command": "arm-none-eabi-g++",
      "flags": [
        "-mcpu=cortex-m4",
        "-DSTM32G431xx",
        "-D_FIR_GIT_REV=\"GIT_NIY\"",
        "-T",
        "./STM32G431KBT6-blg-usb-usercode.ld",
        "./startup_stm32g431xx.s",
        "-o",
        "./build/sketch.elf",
        "-g",
        "./sketch.cpp",
        "-mthumb",
        "--specs=nosys.specs",
        "-Os",
        "qhsm.cpp",
        "-fno-exceptions",
        "-ffunction-sections",
        "-fdata-sections",
        "-Xlinker",
        "--gc-sections"
      ]
    },
    {
      "command": "arm-none-eabi-objcopy",
      "flags": ["-Obinary", "./build/sketch.elf", "./build/sketch.bin"]
    }
  ],
  "mainFunction": true,
  "delimeter": ";",
  "defaultIncludeFiles": ["stm32g431xx.h", "system.c", "Pins.hpp"],
  "defaultBuildFiles": [
    "STM32G431KBT6-blg-usb-usercode.ld",
    "system.c",
    "startup_stm32g431xx.s",
    "stm32g431xx.h",
    "core_cm4.h",
    "core_cmInstr.h",
    "cmsis_gcc.h",
    "core_cmFunc.h",
    "system_stm32g4xx.h",
    "Pins.hpp",
    "macros.hpp"
  ],
  "components": {
    "LED": {
      "description": "Компонент для взаимодействия со светодиодом",
      "img": "arduino/led.svg",
      "signals": {},
      "constructorParameters": {
        "pin": {
          "type": "int",
          "description": "Пин, к которому подключен светодиод"
        }
      },
      "variables": {
        "value": {
          "img": "common/value.svg",
          "type": "int",
          "description": "Текущее значение на пине"
        }
      },
      "methods": {
        "on": {
          "img": "arduino/switch-on.svg",
          "parameters": [
            {
              "name": "brightness",
              "type": "uint8_t",
              "description": "Яркость светодиода (по умолчанию: 100)",
              "optional": true
            }
          ],
          "description": "Зажечь светодиод"
        },
        "off": {
          "img": "arduino/switch-off.svg",
          "description": "Выключить светодиод"
        },
        "toggle": {
          "img": "arduino/toggle.svg",
          "description": "Меняет состояние светодиода на противоположное"
        },
        "blink": {
          "img": "arduino/blink.svg",
          "parameters": [
            {
              "name": "interval",
              "type": "unsigned int",
              "description": "Длительность каждого мигания (мс)"
            },
            {
              "name": "times",
              "type": "byte",
              "description": "Количество миганий"
            }
          ],
          "description": "Мигает светодиодом определенное количество раз с определенной длительностью каждого мигания"
        }
      },
      "buildFiles": ["LED.h", "Connector.hpp", "PWMInit.hpp", "PWM.hpp"],
      "importFiles": ["LED.h"],
      "singletone": false
    },

    "Matrix": {
      "description": "Компонент для взаимодействия со светодиодной матрицы.",
      "img": "arduino/led.svg",
      "signals": {},
      "methods": {
        "setPixel": {
          "img": "arduino/blink.svg",
          "description": "Включить или выключить светодиод.",
          "parameters": [
            {
              "name": "row",
              "type": "uint8_t",
              "description": "Номер строки, на которой расположен светодиод."
            },
            {
              "name": "col",
              "type": "uint8_t",
              "description": "Номер столбца, на котором расположен светодиод."
            },
            {
              "name": "value",
              "type": ["0", "1"],
              "description": "Состояние светодиода вкл./выкл."
            }
          ]
        },
        "offPixel": {
          "img": "arduino/blink.svg",
          "description": "Выключить светодиод.",
          "parameters": [
            {
              "name": "row",
              "type": "uint8_t",
              "description": "Номер строки, на которой расположен светодиод."
            },
            {
              "name": "col",
              "type": "uint8_t",
              "description": "Номер столбца, на котором расположен светодиод."
            }
          ]
        },
        "setPattern": {
          "img": "arduino/blink.svg",
          "description": "Изобразить паттерн на матрице.",
          "parameters": [
            {
              "name": "pattern",
              "type": "Matrix5x7",
              "description": "Паттерн, который будет изображен на матрице."
            }
          ]
        },
        "fill": {
          "img": "arduino/blink.svg",
          "description": "Установить уровень яркости на каждый светодиод.",
          "parameters": [
            {
              "name": "value",
              "type": "uint8_t",
              "description": "Уровень яркости, который будет установлен на каждый светодиод."
            }
          ]
        },
        "clear": {
          "img": "arduino/blink.svg",
          "description": "Выключить все светодиоды.",
          "parameters": []
        },
        "maskPixel": {
          "img": "tjc-ms/maskCell.svg",
          "description": "Включить или выключить светодиод, используя битовую маску.",
          "parameters": [
            {
              "name": "row",
              "type": "uint8_t",
              "description": "Номер строки, на которой расположен светодиод."
            },
            {
              "name": "col",
              "type": "uint8_t",
              "description": "Номер столбца, на котором расположен светодиод."
            },
            {
              "name": "value",
              "type": ["0", "1"],
              "description": "Состояние светодиода вкл./выкл."
            },
            {
              "name": "op",
              "type": ["mask_and", "mask_or", "mask_xor"],
              "description": "Битовая маска для установки значения пикселя."
            }
          ]
        },
        "maskRow": {
          "img": "tjc-ms/maskRow.svg",
          "description": "Включить или выключить строку светодиодов, используя битовую маску.",
          "parameters": [
            {
              "name": "idx",
              "type": "uint8_t",
              "description": "Номер строки, для которой нужно применить маску."
            },
            {
              "name": "pattern",
              "type": "Matrix1x5",
              "description": "Паттерн, который будет применен к строке на матрице."
            },
            {
              "name": "op",
              "type": ["mask_and", "mask_or", "mask_xor"],
              "description": "Битовая маска для установки значения пикселя."
            }
          ]
        },
        "maskCol": {
          "img": "tjc-ms/maskCol.svg",
          "description": "Включить или выключить столбец светодиодов, используя битовую маску.",
          "parameters": [
            {
              "name": "idx",
              "type": "uint8_t",
              "description": "Номер столбца, для которого нужно применить маску."
            },
            {
              "name": "pattern",
              "type": "Matrix1x7",
              "description": "Паттерн, который будет применен к столбцу на матрице."
            },
            {
              "name": "op",
              "type": ["mask_and", "mask_or", "mask_xor"],
              "description": "Битовая маска для установки значения пикселя."
            }
          ]
        },
        "maskPattern": {
          "img": "tjc-ms/maskGrid.svg",
          "description": "Изобразить паттерн на матрице, используя битовую маску.",
          "parameters": [
            {
              "name": "pattern",
              "type": "Matrix5x7",
              "description": "Паттерн, который будет изображен на матрице."
            },
            {
              "name": "op",
              "type": ["AND", "OR", "XOR"],
              "description": "Битовая маска для установки значения пикселя."
            }
          ]
        }
      },
      "variables": {},
      "constructorParameters": {},
      "buildFiles": ["Matrix.hpp"],
      "importFiles": ["Matrix.hpp"],
      "singletone": false
    },
    "Speaker": {
      "description": "Компонент для взаимодействия с динамиком.",
      "img": "arduino/timeout.svg",
      "signals": {
        "isSoundEnd": {
          "img": "arduino/isPressed.svg",
          "description": "Создает сигнал, если звук закончен.",
          "checkMethod": "isSoundEnd"
        }
      },
      "constructorParameters": {},
      "variables": {},
      "buildFiles": ["Sounds.hpp", "Speaker.hpp", "CommonSound.hpp"],
      "importFiles": ["Speaker.hpp"],
      "methods": {
        "play": {
          "img": "arduino/start.svg",
          "parameters": [
            {
              "name": "sound",
              "type": ["&TestSound"],
              "description": "Проигрываемый звук.",
              "optional": false
            },
            {
              "name": "duration",
              "type": "uint16_t",
              "description": "Длительность звука (мс).",
              "optional": false
            }
          ],
          "description": "Включить звук."
        }
      },
      "singletone": false
    },

    "Microphone": {
      "description": "Компонент для взаимодействия с микрофонами. По умолчанию выключен.",
      "img": "arduino/led.svg",
      "signals": {},
      "constructorParameters": {},
      "variables": {
        "lValue": {
          "img": "common/value.svg",
          "type": "uint16_t",
          "description": "Текущее значение на левом микрофоне."
        },
        "rValue": {
          "img": "common/value.svg",
          "type": "uint16_t",
          "description": "Текущее значение на правом микрофоне."
        }
      },
      "methods": {
        "on": {
          "img": "arduino/switch-on.svg",
          "parameters": [],
          "description": "Включить микрофон."
        },
        "off": {
          "img": "arduino/switch-off.svg",
          "description": "Выключить микрофон."
        }
      },
      "buildFiles": ["Microphone.hpp"],
      "importFiles": ["Microphone.hpp"],
      "singletone": false
    },

    "Random": {
      "description": "Генерация псевдо-случайного числа",
      "img": "common/random.svg",
      "constructorParameters": {},
      "signals": {},
      "methods": {
        "setSeed": {
          "img": "common/randomSeed.svg",
          "parameters": [
            {
              "name": "seed",
              "type": "unsigned long"
            }
          ],
          "description": "Сбросить состояние генератора и установить новый seed"
        },
        "doRandom": {
          "img": "common/randomRoll.svg",
          "description": "Сгенерировать случайное число"
        },
        "doRangeRandom": {
          "img": "common/randomRange.svg",
          "parameters": [
            {
              "name": "begin",
              "type": "signed long long"
            },
            {
              "name": "end",
              "type": "signed long long"
            }
          ],
          "description": "Сгенерировать случайное число в заданном диапазоне [begin; end)"
        }
      },
      "buildFiles": ["Random.hpp"],
      "importFiles": ["Random.hpp"],
      "singletone": false,
      "variables": {
        "value": {
          "img": "common/valueSigned.svg",
          "type": "signed long",
          "description": "Сгенерированное целое число со знаком"
        },
        "uValue": {
          "img": "common/valueUnsigned.svg",
          "type": "unsigned long",
          "description": "Сгенерированное безнаковое целое число"
        }
      }
    },

    "Timer": {
      "description": "Программный таймер",
      "img": "arduino/timer.svg",
      "signals": {
        "timeout": {
          "img": "arduino/timeout.svg",
          "description": "Время вышло!",
          "checkMethod": "timeout"
        }
      },
      "constructorParameters": {},
      "methods": {
        "reset": {
          "img": "arduino/reset.svg",
          "description": "Сбросить таймер, отчет начнется сначала"
        },
        "disable": {
          "img": "arduino/timer-stop.svg",
          "description": "Отключить таймер."
        },
        "enable": {
          "img": "arduino/timer-start.svg",
          "description": "Включить таймер."
        },
        "start": {
          "img": "arduino/start.svg",
          "parameters": [
            {
              "name": "interval",
              "type": "unsigned long",
              "description": "Интервал срабатывания."
            }
          ],
          "description": "Запустить таймер. Будет сигнал раз в интервал."
        }
      },
      "buildFiles": ["Timer.h"],
      "importFiles": ["Timer.h"],
      "singletone": false,
      "variables": {
        "difference": {
          "img": "arduino/difference.svg",
          "type": "unsigned long",
          "description": "Оставшееся время до окончания таймера."
        }
      }
    },
    "Counter": {
      "description": "Переменная-счетчик.",
      "img": "arduino/counter.svg",
      "signals": {
        "isEqual": {
          "img": "arduino/isEqual.svg",
          "description": "Издать сигнал, если значение счетчика равно value",
          "checkMethod": "isEqual",
          "parameters": [
            {
              "name": "value",
              "type": "int"
            }
          ]
        },
        "isLess": {
          "img": "arduino/isLess.svg",
          "description": "Издать сигнал, если значение счетчика меньше value",
          "checkMethod": "isLess",
          "parameters": [
            {
              "name": "value",
              "type": "int"
            }
          ]
        },
        "isGreater": {
          "img": "arduino/isGreater.svg",
          "description": "Издать сигнал, если значение счетчика больше value",
          "checkMethod": "isGreater",
          "parameters": [
            {
              "name": "value",
              "type": "int"
            }
          ]
        }
      },
      "constructorParameters": {},
      "methods": {
        "add": {
          "img": "arduino/add.svg",
          "description": "Добавить value к значению счетчика",
          "parameters": [
            {
              "name": "value",
              "type": "int"
            }
          ]
        },
        "sub": {
          "img": "arduino/sub.svg",
          "description": "Вычесть value к значению счетчика",
          "parameters": [
            {
              "name": "value",
              "type": "int"
            }
          ]
        },
        "set": {
          "img": "arduino/sub.svg",
          "description": "Установить value к значению счетчика",
          "parameters": [
            {
              "name": "value",
              "type": "int"
            }
          ]
        },
        "reset": {
          "img": "arduino/reset.svg",
          "description": "Обнулить значение счетчика."
        }
      },
      "variables": {
        "value": {
          "img": "common/value.svg",
          "description": "Текущее значение счетчика",
          "type": "int"
        }
      },
      "buildFiles": ["Counter.h"],
      "importFiles": ["Counter.h"],
      "singletone": false
    },

    "CalcInt": {
      "description": "Компонент для целочисленных вычислений. Хранит счётчик (32-разрядное знаковое число), над которым можно совершать арифметические и битовые операции.",
      "img": "math/calcInt.svg",
      "signals": {
        "isOverflow": {
          "img": "math/overflow.svg",
          "description": "Переполнение счетчика.",
          "checkMethod": "isOverflow"
        },
        "isZeroDivision": {
          "img": "math/divZero.svg",
          "description": "Деление на ноль.",
          "checkMethod": "isZeroDivision"
        }
      },
      "methods": {
        "set": {
          "img": "common/set-value.svg",
          "description": "Установить значение счетчика.",
          "parameters": [
            {
              "name": "value",
              "type": "int32_t",
              "description": "Новое значение для счетчика."
            }
          ]
        },
        "add": {
          "img": "math/add.svg",
          "description": "Прибавить значение к счетчику.",
          "parameters": [
            {
              "name": "value",
              "type": "int32_t",
              "description": "Слагаемое для операции."
            }
          ]
        },
        "sub": {
          "img": "math/sub.svg",
          "description": "Вычесть значение из счетчика.",
          "parameters": [
            {
              "name": "value",
              "type": "int32_t",
              "description": "Вычитаемое для операции."
            }
          ]
        },
        "mul": {
          "img": "math/mul.svg",
          "description": "Умножить значение счетчика.",
          "parameters": [
            {
              "name": "value",
              "type": "int32_t",
              "description": "Множитель для операции."
            }
          ]
        },
        "div": {
          "img": "math/div.svg",
          "description": "Целочисленное деление значения счетчика. При делении на ноль значение не изменяется и возникает сигнал.",
          "parameters": [
            {
              "name": "value",
              "type": "int32_t",
              "description": "Делитель для операции."
            }
          ]
        },
        "mod": {
          "img": "math/mod.svg",
          "description": "Остаток от деления счетчика. При делении на ноль значение не изменяется и возникает сигнал.",
          "parameters": [
            {
              "name": "value",
              "type": "int32_t",
              "description": "Делитель для операции."
            }
          ]
        },
        "neg": {
          "img": "math/neg.svg",
          "description": "Поменять знак у счетчика.",
          "parameters": []
        },
        "abs": {
          "img": "math/abs.svg",
          "description": "Установить абсолютное значение для счетчика.",
          "parameters": []
        },
        "bitAnd": {
          "img": "math/bitAnd.svg",
          "description": "Побитовое И для значения счетчика.",
          "parameters": [
            {
              "name": "value",
              "type": "int32_t",
              "description": "Значение для операции."
            }
          ]
        },
        "bitOr": {
          "img": "math/bitOr.svg",
          "description": "Побитовое ИЛИ для значения счетчика.",
          "parameters": [
            {
              "name": "value",
              "type": "int32_t",
              "description": "Значение для операции."
            }
          ]
        },
        "bitXor": {
          "img": "math/bitXor.svg",
          "description": "Побитовая операция XOR для значения счетчика.",
          "parameters": [
            {
              "name": "value",
              "type": "int32_t",
              "description": "Значение для операции."
            }
          ]
        },
        "bitNot": {
          "img": "math/bitNot.svg",
          "description": "Побитовое отрицание для значения счетчика.",
          "parameters": []
        },
        "shiftLeft": {
          "img": "math/shiftLeft.svg",
          "description": "Побитовый сдвиг влево для значения счетчика.",
          "parameters": [
            {
              "name": "value",
              "type": "int32_t",
              "description": "Количество бит для сдвига."
            }
          ]
        },
        "shiftRight": {
          "img": "math/shiftRight.svg",
          "description": "Побитовый сдвиг вправо для значения счетчика.",
          "parameters": [
            {
              "name": "value",
              "type": "int32_t",
              "description": "Количество бит для сдвига."
            }
          ]
        }
      },
      "variables": {
        "value": {
          "img": "common/value.svg",
          "type": "int32_t",
          "description": "Значение счетчика."
        }
      },
      "constructorParameters": {},
      "buildFiles": ["CalcInt.hpp", "OverflowHelpers.hpp"],
      "importFiles": ["CalcInt.hpp"],
      "singletone": false
    },

    "CalcFloat": {
      "description": "Компонент для вычислений c плавающей точкой. Хранит счётчик (вещественное число), над которым можно совершать арифметические операции.",
      "img": "math/calcFloat.svg",
      "signals": {
        "isOverflow": {
          "img": "math/overflow.svg",
          "description": "Переполнение счетчика.",
          "checkMethod": "isOverflow"
        },
        "isZeroDivision": {
          "img": "math/divZero.svg",
          "description": "Деление на ноль.",
          "checkMethod": "isZeroDivision"
        }
      },
      "methods": {
        "set": {
          "img": "common/set-value.svg",
          "description": "Установить значение счетчика.",
          "parameters": [
            {
              "name": "value",
              "type": "float",
              "description": "Новое значение для счетчика."
            }
          ]
        },
        "add": {
          "img": "math/add.svg",
          "description": "Прибавить значение к счетчику.",
          "parameters": [
            {
              "name": "value",
              "type": "float",
              "description": "Слагаемое для операции."
            }
          ]
        },
        "sub": {
          "img": "math/sub.svg",
          "description": "Вычесть значение из счетчика.",
          "parameters": [
            {
              "name": "value",
              "type": "float",
              "description": "Вычитаемое для операции."
            }
          ]
        },
        "mul": {
          "img": "math/mul.svg",
          "description": "Умножить значение счетчика.",
          "parameters": [
            {
              "name": "value",
              "type": "float",
              "description": "Множитель для операции."
            }
          ]
        },
        "div": {
          "img": "math/div.svg",
          "description": "Деление значения счетчика. При делении на ноль значение не изменяется и возникает сигнал.",
          "parameters": [
            {
              "name": "value",
              "type": "float",
              "description": "Делитель для операции."
            }
          ]
        },
        "mod": {
          "img": "math/mod.svg",
          "description": "Остаток от деления счетчика. При делении на ноль значение не изменяется и возникает сигнал.",
          "parameters": [
            {
              "name": "value",
              "type": "float",
              "description": "Делитель для операции."
            }
          ]
        },
        "neg": {
          "img": "math/neg.svg",
          "description": "Поменять знак у счетчика.",
          "parameters": []
        },
        "abs": {
          "img": "math/abs.svg",
          "description": "Установить абсолютное значение для счетчика.",
          "parameters": []
        },
        "pow": {
          "img": "math/pow.svg",
          "description": "Возвести значение счетчика в степень.",
          "parameters": [
            {
              "name": "power",
              "type": "float",
              "description": "Значение для операции (возводимая степень)."
            }
          ]
        },
        "sqrt": {
          "img": "math/sqrt.svg",
          "description": "Взять квадратный корень от значения счетчика.",
          "parameters": []
        },
        "log": {
          "img": "math/log.svg",
          "description": "Логарифм от счетчика с задаваемым основанием.",
          "parameters": [
            {
              "name": "base",
              "type": "float",
              "description": "Значение для операции (основание логарифма)."
            }
          ]
        }
      },
      "variables": {
        "value": {
          "img": "common/value.svg",
          "type": "float",
          "description": "Значение счетчика."
        }
      },
      "constructorParameters": {},
      "buildFiles": ["CalFloat.hpp", "OverflowHelpers.hpp"],
      "importFiles": ["CalcFloat.hpp"],
      "singletone": false
    },

    "Array": {
      "description": "Статический массив",
      "img": "arduino/timer.svg",
      "signals": {},
      "constructorParameters": {
        "size": {
          "type": "uint16_t",
          "description": "Размер массива (должен быть не более, чем 65535 элементов)",
          "optional": false
        }
      },
      "methods": {
        "set": {
          "img": "common/set-value.svg",
          "description": "Установить значение элементу с заданным индексом",
          "parameters": [
            {
              "name": "index",
              "description": "Индекс элемента",
              "type": "uint16_t"
            },
            {
              "name": "value",
              "description": "Новое значение для элемента",
              "type": "int16_t"
            }
          ]
        },
        "peek": {
          "img": "common/arrayPeek.svg",
          "description": "Переместиться на элемент с заданным индексом",
          "parameters": [
            {
              "name": "index",
              "img": "common/arrayIndex.svg",
              "description": "Индекс элемента",
              "type": "uint16_t"
            }
          ]
        },
        "next": {
          "img": "common/arrayNext.svg",
          "description": "Переместиться на элемент со следующим индексом"
        },
        "prev": {
          "img": "common/arrayPrev.svg",
          "description": "Переместиться на элемент с предыдущим индексом"
        }
      },
      "buildFiles": ["Array.hpp"],
      "importFiles": ["Array.hpp"],
      "singletone": false,
      "variables": {
        "value": {
          "img": "common/value.svg",
          "type": "int16_t",
          "description": "Значение элемента с текущим индексом."
        },
        "index": {
          "img": "common/arrayIndex.svg",
          "type": "uint16_t",
          "description": "Текущий индекс."
        },
        "size": {
          "img": "common/arraySize.svg",
          "type": "uint16_t",
          "description": "Размер массива."
        }
      }
    },
    "PhotoDiode": {
      "description": "Компонент, вычисляющий уровень освещенности. Искусственный свет не считается.",
      "img": "arduino/led.svg",
      "signals": {},
      "constructorParameters": {},
      "methods": {},
      "variables": {
        "value": {
          "img": "common/value.svg",
          "type": "uint16_t",
          "description": "Уровень освещенности."
        }
      },
      "buildFiles": ["PhotoDiode.hpp"],
      "importFiles": ["PhotoDiode.hpp"],
      "loopActions": ["scan"]
    },
    "RgbLed": {
      "description": "Компонент для взаимодействия со светодиодом",
      "img": "arduino/led.svg",
      "signals": {},
      "constructorParameters": {
        "pin": {
          "type": ["1", "2"],
          "description": "Пин, к которому подключен светодиод"
        }
      },
      "variables": {
        "value": {
          "img": "common/value.svg",
          "type": "int",
          "description": "Текущее значение на пине"
        }
      },
      "methods": {
        "on_color": {
          "img": "arduino/switch-on.svg",
          "parameters": [
            {
              "name": "color",
              "type": [
                "&ColorRed",
                "&ColorReddish",
                "&ColorOrange",
                "&ColorGreen",
                "&ColorLime",
                "&ColorBlue",
                "&ColorCyan",
                "&ColorPink",
                "&ColorPurple",
                "&ColorYellow",
                "&ColorWhite",
                "&ColorBlack",
                "&ColorPerfectWhite"
              ],
              "description": "Цвет светодиода.",
              "optional": false
            }
          ],
          "description": "Зажечь светодиод"
        },
        "on_rgb": {
          "img": "arduino/switch-on.svg",
          "parameters": [
            {
              "name": "red",
              "type": "uint8_t",
              "description": "Продолжительность цвета светодиода (R).",
              "optional": false
            },
            {
              "name": "green",
              "type": "uint8_t",
              "description": "Продолжительность цвета светодиода (G).",
              "optional": false
            },
            {
              "name": "blue",
              "type": "uint8_t",
              "description": "Продолжительность цвета светодиода (B).",
              "optional": false
            },
            {
              "name": "black",
              "type": "uint8_t",
              "description": "Продолжительность выключенных светодиодов.",
              "optional": false
            }
          ],
          "description": "Зажечь светодиод"
        },

        "off": {
          "img": "arduino/switch-off.svg",
          "description": "Выключить светодиод"
        }
      },
      "buildFiles": ["RgbLed.hpp", "Connector.hpp", "PWMHelpers.hpp", "PWMInit.hpp", "PWM.hpp"],
      "importFiles": ["RgbLed.hpp"],
      "singletone": false
    },
    "Button": {
      "description": "Компонент для взаимодействия с физической кнопкой",
      "img": "arduino/button.svg",
      "signals": {
        "isPressed": {
          "img": "arduino/isPressed.svg",
          "description": "Создает сигнал, если кнопка была нажата",
          "checkMethod": "isPressed"
        },
        "isClicked": {
          "img": "arduino/clicked.svg",
          "description": "Создает сигнал, если кнопка была кликнута",
          "checkMethod": "clicked"
        }
      },
      "constructorParameters": {
        "pin": {
          "type": ["1", "2", "3", "4", "5", "6"],
          "valueAlias": [
            "Правая лапа",
            "Левая лапа",
            "Правый палец",
            "Левый палец",
            "Правый бок",
            "Левый бок"
          ],
          "description": "Номер кнопки"
        }
      },
      "variables": {
        "value": {
          "img": "common/value.svg",
          "type": "int",
          "description": "Текущее значение на пине"
        }
      },
      "buildFiles": ["Button.hpp"],
      "importFiles": ["Button.hpp"],
      "methods": {},
      "singletone": false
    }
  }
}
